// start {partialsdir}/attributes.adoc[]
// includedFile ../modules/ROOT/pages/_partials/attributes.adoc
:org-name: AeroGear

:product-name: Mobile Services

:release-number: 1.0.0
:xamarin-sdk-release-number: 2.0.1
:ios-sdk-release-number: 2.0.0
:android-sdk-release-number: 2.0.0

:service-name:

:mobile-client: Mobile Client
:mobile-client-openshift: Mobile Client in your OpenShift project
:mobile-cli: Mobile CLI

// Metrics Service
:metrics-service: Mobile Metrics
:grafana-ui: Grafana
:prometheus-ui: Prometheus

// IDM Service
:keycloak-service: Identity Management
:keycloak-ui: Keycloak Admin UI
:keycloak-dashboard: Auth Dashboard
:idm-name: Keycloak

// Push Service

:unifiedpush-service: Push Notifications
:push-ui: Unified Push Admin UI
:push-notification: push notification

// Build Service
:mobile-ci-cd-service: Mobile CI/CD
:mobilecicd-ui: Jenkins UI

// Device Security
:device-security-service: Device Security

// Sync Service
:sync-service: Data Sync
:data-sync-version: 0.1.0

:SDK: AeroGear SDK
:ios-sdk: AeroGear SDK for iOS
:android-sdk: AeroGear SDK for Android
:js-sdk: AeroGear SDK for Cordova
:xamarin-sdk: AeroGear SDK for Xamarin
// end {partialsdir}/attributes.adoc[]

:toc:

= Glossary

// start mobile_terminology.adoc[leveloffset=+1]
:leveloffset: +1

// includedFile ../modules/ROOT/pages/_partials/mobile_terminology.adoc


= {org-name} {product-name} Terminology

[[mobile-service]]Mobile Service:: A mobile service accelerates your mobile app development by providing solutions for common mobile development use cases such as Push notifications. Mobile services are hosted on OpenShift and you use the OpenShift console to provision and associate services with your mobile apps.
For more information, see xref:con_services.adoc[Mobile Services].

[[mobile-client]]{mobile-client}:: A {mobile-client} is the representation of a mobile app in an OpenShift project. This allows you connect and disconnect an app with any mobile service in the same OpenShift project.
For more information, see xref:registering-a-mobile-app.adoc[Registering a mobile app].

[[mobile-app]]mobile app:: A mobile app is your code for Android, iOS, Cordova or Xamarin that uses {product-name}.

Binding:: You can associate a Mobile Service with a mobile app to allow your mobile app use the mobile service.

Mobile Services configuration file:: The `mobile-services.json` file provides the information your mobile app needs to use {product-name}.

Back-end:: Your server-side code, typically Node.js or Java.


:leveloffset!:
// end mobile_terminology.adoc[leveloffset=+1]
// start sync/ref_terminology.adoc[leveloffset=+1]
:leveloffset: +1



//':context:' is a vital parameter. See: http://asciidoctor.org/docs/user-manual/#include-multiple
:context: ref_terminology_{sync-service}

[id='{context}_ref_terminology']

= {sync-service} Terminology

This section describes terminology that is associated with {sync-service}.

GraphQL:: A query language for data that is more powerful than a REST API. See link:https://graphql.org/learn[GraphQL]

Apollo:: A client side library to work with a GraphQL based server. See link:https://www.apollographql.com/[Apollo]

:leveloffset!:
// end sync/ref_terminology.adoc[leveloffset=+1]
// start keycloak/ref_terminology.adoc[leveloffset=+1]
:leveloffset: +1

// includedFile ../modules/ROOT/pages/_partials/keycloak/ref_terminology.adoc


//':context:' is a vital parameter. See: http://asciidoctor.org/docs/user-manual/#include-multiple
:context: ref_terminology_{keycloak-service}

[id='{context}_ref_terminology']

= {keycloak-service} Terminology

This section describes terminology that is associated with {keycloak-service}.

SSO:: _Single Sign On_, the ability to share a login between multiple services

OpenID Connect:: a standard for providing identity on top of OAuth 2.0

Keycloak:: Red Hat's implementation of _SSO_ and _OpenID_ used as the identity provider

Client ID:: is the client identifier for _OpenID Connect_ requests, a simple alpha-numeric string

User Attributes:: additional properties for user accounts (besides name and email) managed by Keycloak

:leveloffset!:
// end keycloak/ref_terminology.adoc[leveloffset=+1]
// start push/ref_terminology.adoc[leveloffset=+1]
:leveloffset: +1



//':context:' is a vital parameter. See: http://asciidoctor.org/docs/user-manual/#include-multiple
:context: ref_terminology_{unifiedpush-service}

[id='{context}_ref_terminology']

= {unifiedpush-service} Terminology

This section describes terminology that is associated with {unifiedpush-service}.

Push Application:: A logical construct that represents an Mobile App, for example, _Mobile HR_.

Push Notification Message:: A simple message to be sent to a Push Application.

Sender Endpoint API:: A RESTful API that receives Push Notification Message requests for a PushApplication or some of its different Variants. The Server translates this request into the platform specific details and delivers the payload to the 3rd party cloud providers, which eventually might deliver the message to the physical device.

Variant:: A variant of the Push Application, representing a specific mobile platform, like iOS or Android, or even more fine-grained differentiation like iPad or iPhone.
There can be multiple variants for a single Push Application (for example, _Mobile HR Android_, _Mobile HR iPad_, _Mobile HR iOS free_ or _Mobile HR iOS premium).
Each supported variant type contains some platform specific properties, such as a Google API key (Android) or passphrase and certificate (Apple).

APNs:: link:https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1[Apple Push Notification service].

Installation:: Represents an actual device, registered with the UnifiedPush Server. User1 running _HR Android_ app, while User2 runs _HR iPhone premium_ on his phone.

Administrative User Interface:: (AUI) The {push-ui} Web UI that allows you manage Push Applications and Variants, view statistics and send Push Notifications to devices.

:leveloffset!:
// end push/ref_terminology.adoc[leveloffset=+1]
// start mobilecicd/ref_terminology.adoc[leveloffset=+1]
:leveloffset: +1



//':context:' is a vital parameter. See: http://asciidoctor.org/docs/user-manual/#include-multiple
:context: ref_terminology_{mobile-ci-cd-service}

[id='{context}_ref_terminology']

= {mobile-ci-cd-service} Terminology

This section describes terminology that is associated with {mobile-ci-cd-service}.

CI/CD:: Continuous Integration / Continuous Development

Jenkins:: A tool that helps to automate the software development process, with continuous integration and facilitating continuous delivery.

Build:: A single run of Jenkins against a source code repository.

Artifact:: The result of a succesful build in Jenkins, this is the binary that can be installed on to a mobile device.

Jenkinsfile:: This is a file contained in the source code repository which instructs Jenkins on how to build an artifact with this source code.

:leveloffset!:
// end mobilecicd/ref_terminology.adoc[leveloffset=+1]
// start security/ref_terminology.adoc[leveloffset=+1]
:leveloffset: +1



Root Access Detection (ROOT_ENABLED)::
Use it to help prevent your app running in a device that has been rooted/jailbroken. A device is considered rooted if *any* of the following are true:

- A custom key has been used to sign the kernel
- The `su` binaries are present

[role="primary"]
.Android
****
`DeviceChecks.ROOT_ENABLED`.

This function uses the link:https://github.com/scottyab/rootbeer[Rootbeer, window="_blank"] library to check if root access is present on the device.
****
[role="secondary"]
.iOS
****
This check is not available for iOS.
****
[role="secondary"]
.Cordova
****
This check is not available for Cordova.
****
[role="secondary"]
.Xamarin
****
This check is not available for Xamarin.
****

Developer Mode Detection (DEVELOPER_MODE_ENABLED)::
To detect if Developer Mode has been enabled on the device the `DeviceCheckType#DEVELOPER_MODE_ENABLED` function can be used. This function uses Android’s link:https://developer.android.com/reference/android/provider/Settings.html[Settings, window="_blank"] class.

Debugger Detection (DEBUGGER_ENABLED)::
To detect if an Android debugger is attached to the app the `DeviceCheckType#DEBUGGER_ENABLED` function can be used. This function uses Android’s link:https://developer.android.com/reference/android/os/Debug.html[Debug, window="_blank"] class.

Emulator Detection (IS_EMULATOR)::
To detect if the app is being run on an emulator the `DeviceCheckType#IS_EMULATOR` function can be used. This function uses Android’s link:https://developer.android.com/reference/android/os/Build.html[Build, window="_blank"] class.

Device Lock Detection (SCREEN_LOCK_ENABLED)::
To detect if a device has a lock screen set (with pin, fingerprint, pattern) the `DeviceCheckType#SCREEN_LOCK_ENABLED` function can be used. This function uses Android’s link:https://developer.android.com/reference/android/app/KeyguardManager.html[KeyguardManager, window="_blank"] class.

App Data Backup Detection (BACKUP_ENABLED)::
To detect whether the application’s data is configured to be synchronized across devices the `DeviceCheckType#BACKUP_ENABLED` function can be used. The link:https://developer.android.com/guide/topics/manifest/application-element.html[allowBackup, window="_blank"] flag determines whether to allow the application to participate in the backup and restore infrastructure, which might be interesting to avoid depending on your app’s needs.

Device Encryption Detection (ENCRYPTION_ENABLED)::
To detect whether the devices' filesystem is encrypted the `DeviceCheckType#ENCRYPTION_ENABLED` function can be used. This function uses Android’s link:https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html[DevicePolicyManager, window="_blank"] class.

:leveloffset!:
// end security/ref_terminology.adoc[leveloffset=+1]
