<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Additional configuration for Android</title>
<date>2018-06-22</date>
</info>
<preface>
<title>Preface</title>
<simpara>Unresolved directive in android-additional-configuration.adoc - include::{partialsdir}/attributes.adoc[]</simpara>
</preface>
<part xml:id="_additional_configuration_for_android">
<title>Additional configuration for Android</title>
<chapter xml:id="_authentication_browser">
<title>Authentication Browser</title>
<simpara>The <literal>AuthService</literal> can also be configured to whitelist or blacklist browsers that should or shouldn&#8217;t be used during authentication.  During authentication the <literal>Auth SDK</literal> redirects the user to an internet browser.  A Keycloak login web page is loaded in this internet browser to allow users to authenticate.
<literal>Authentication Browser</literal> is referring to that internet browser used during authentication.  The <literal>Auth SDK</literal> provides some <xref linkend="_pre_defined_browsers"/> that can be used to be whitelisted or blacklisted and there is also the option to use <xref linkend="_custom_browsers"/>.
The <literal>Auth SDK</literal> can be configured to to use specific browsers and versions, this is know as <literal>whitelist</literal>, or the <literal>Auth SDK</literal> can be configured to permit specific browsers and versions, this is known as <literal>blacklist</literal>.  Once one or more internet browsers have been configured they can be configured to be blacklisted or whitelisted using <xref linkend="_browser_configuration"/>.</simpara>
<section xml:id="_pre_defined_browsers">
<title>Pre-defined Browsers</title>
<simpara>There are some pre-defined browsers that can be be customised to be used as standalone or custom tab browsers and can target a specific version or version range.
There are also default options available where no extra configuration is needed.</simpara>
<simpara>A pre-defined browser can be retrieved from <literal>AuthBrowsers</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">// a default Google Chrome browser. No extra configuration is neccessary.
AuthBrowser chromeBrowser = AuthBrowsers.CHROME_DEFAULT;

// a customisable Samsung browser where the custom tab mode has been set to `false` i.e.
// it should be used as a standalone browser and the version should be at least 6.
AuthBrowser samsungBrowser = AuthBrowsers.samsung(false, AuthBrowserVersionRange.atMost("6"));</programlisting>
<simpara>For the full list of predefined browsers available see <link xlink:href="https://github.com/aerogear/aerogear-android-sdk/blob/master/auth/src/main/java/org/aerogear/mobile/auth/configuration/AuthBrowsers.java">AuthBrowsers.java</link>.</simpara>
</section>
<section xml:id="_custom_browsers">
<title>Custom Browsers</title>
<simpara>To use a custom browser an <link xlink:href="https://github.com/aerogear/aerogear-android-sdk/blob/master/auth/src/main/java/org/aerogear/mobile/auth/configuration/AuthBrowser.java">AuthBrowser</link> object can be created:</simpara>
<programlisting language="java" linenumbering="unnumbered">AuthBrowser customBrowser = new AuthBrowser("custom.package.name", signatureSet, true, AuthBrowserVersionRange.ANY);</programlisting>
</section>
</chapter>
<chapter xml:id="_browser_configuration">
<title>Browser Configuration</title>
<simpara>Once a browser or browsers have been configured, <literal>BrowserConfiguration</literal> can be used to either blacklist or whitelist these browsers.</simpara>
<important>
<simpara>It&#8217;s only possible to blacklist or whitelist a browser/browsers. It is not possible to both whitelist and blacklist a browser/browsers.  If both are invoked the most previous browser configuration built will be used.</simpara>
</important>
<programlisting language="java" linenumbering="unnumbered">// blacklist the default Mozilla Firefox browser i.e. any version of Mozilla firefox for use as a standalone browser will be permitted for authentication
BrowserConfiguration browserConfiguration = new BrowserConfiguration.BrowserConfigurationBuilder().blackList().browser(AuthBrowsers.FIREFOX_DEFAULT).build();

// whitelist a custom Google Chrome browser i.e. a Google Chrome browser for use as a standalone browser where the version range is between 45 and 55.
AuthBrowser customChrome = AuthBrowsers.chrome(false, AuthBrowserVersionRange.between("45", "55"));
BrowserConfiguration browserConfiguration = new BrowserConfiguration.BrowserConfigurationBuilder().whitelist().browser(customChrome).build();

// blacklist the two browsers
BrowserConfiguration browserConfiguration = new BrowserConfiguration.BrowserConfigurationBuilder().blacklist().browser(AuthBrowsers.FIREFOX_DEFAULT).browser(customChrome).build();

// add the two browsers to a Set and whitelist the set of browsers
AuthBrowser samsungCustomTab = AuthBrowsers.SAMSUNG_CUSTOM_TAB;
Set&lt;Browser&gt; browsers = new HashSet&lt;&gt;(Arrays.asList(samsungCustomTab, customChrome));
BrowserConfiguration browserConfiguration = new BrowserConfiguration.BrowserConfigurationBuilder().whiteList().browsers(browsers).build();</programlisting>
<simpara>The <literal>AuthService</literal> can be configured to use the browser configuration once its been instantiated:</simpara>
<programlisting language="java" linenumbering="unnumbered">// auth service configuration
AuthServiceConfiguration authServiceConfig = new AuthServiceConfiguration
    .AuthConfigurationBuilder()
    .withRedirectUri("org.aerogear.mobile.example:/callback")
    .build();

// browser configuration
BrowserConfiguration browserConfiguration = new BrowserConfiguration.BrowserConfigurationBuilder()
    .blackList()
    .browser(AuthBrowsers.CHROME_CUSTOM_TAB)
    .build();

authService.init(context, authServiceConfig, browserConfiguration);</programlisting>
</chapter>
<chapter xml:id="_defining_custom_scopes">
<title>Defining Custom Scopes</title>
<simpara>Optionally, scopes can be defined for the auth request using a space as the delimiter as per <link xlink:href="https://tools.ietf.org/html/rfc6749#section-3.3">RFC-6749</link>.
By default, the <literal>"openid"</literal> scope is sent if no scopes are defined.</simpara>
<programlisting language="java" linenumbering="unnumbered">// default is 'openid' when not defined
.withScopes("openid offline_access")</programlisting>
<simpara>If <literal>AuthService#init</literal> is not invoked then an <literal>IllegalStateException</literal> will be thrown when using the
service.</simpara>
</chapter>
</part>
</book>
