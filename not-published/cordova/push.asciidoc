== AeroGear JavaScript UnifiedPush Server SDK

@aerogear/push makes it simple to receive push notifications in Cordova and Ionic Apps. It is a thin wrapper that helps you integrating with the Aerogear UnifiedPush Server. For Cordova and Ionic we provide a plugin that extends the popular link:https://github.com/phonegap/phonegap-plugin-push[Phonegap Plugin Push] library to offer a complete push solution. It can work in interaction with the Aerogear UnifiedPush Server or it can be used directly with Firebase Cloud Messaging and Apple Push Notification Service.

Have a look at the link:https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md#android-details[Plugin documentation] for more details about the platform push plugin.

=== Supported Platforms

- Android
- iOS

=== Installation

For a Cordova App just install `cordova-plugin-aerogear-push`, it already includes the platform push plugin:

[source,bash]
----
$ cordova plugin add @aerogear/cordova-plugin-aerogear-push
----

Ionic Apps require an additional dependency, the link:https://ionicframework.com/docs/native/push/[Ionic Native Push Library]

[source,bash]
----
$ npm install --save @ionic-native/push
----

=== Configuration

Make sure that your `mobile-services.json` file has a configuration object for push. If not you can retrieve it from the mobile client UI in Openshift or using the mobile cli:

[source,bash]
----
$ mobile get clientconfig <mobile client id> --namespace=<namespace> -o json
----

Copy the over the `push` part of the configuration:

----
{
  ...
  "services": [
    {
      "id": "push",
      "name": "push",
      "type": "push",
      "url": <backend url>,
      "config": {
        "ios":      <iOS specific config>
        "android":  <Android specific config>
      }
    }
  ]
}
----

Next you need to configure the push provider itself. For Android, login to your link:https://firebase.google.com/[Firebase account], download the config file (`google-services.json`) and include it in the root of your project folder. For setting up push notifications in your iOS project please refer to the relevant documentation from Apple.

=== Usage

Unified Push Server allows sending messages to all registered devices, independent of the platform that is used.

[source,typescript]
----
import { Push, PushObject } from "@ionic-native/push";
import { PushRegistration } from "@aerogear/push";

const pushObject = new Push().init({
    android: {},
    ios: {
      alert: true,
      badge: true,
      sound: true
    }
});

// Registration handler
pushObject.on('registration').subscribe(data => {
  // PushRegistration will handle the device registration with the Unifiedpush Server
  new PushRegistration().register(data.registrationId).then(() => {
    // Registration with UPS successful, you can now send push notifications from the UPS UI
  }).catch(err => {
    // Error on device registration
  });
});

// Notification handler
pushObject.on('notification').subscribe(notification => {
  // Handle notification here
});
----

==== Options

You can specify a number of registration options:

- `deviceToken`: a unique identifier for your device, should be provided by the platform push plugin.
- `alias`: You can group a number of devices under the same alias (e.g. cordova-ios) and target them easily.
- `categories`: An array of categories that can be used to filter the push notifications you want to receive on a device.

At this point you should be able to send push notifications using the UPS Admin UI.
