= AeroGear Service Push SDK

AeroGear Push SDK for IOS integrates with link:https://github.com/aerogear/aerogear-unifiedpush-server/[AeroGear Unified Push Server] in order to receive push notifications to mobile iOS devices.

== Adding dependency

To integrate AeroGear iOS SDK into your Xcode project, specify it in your `Podfile`:

[source,ruby]
----
...

target 'TargetName' do
pod 'AGSPush', '~> [VERSION]'
end
----

Then, run the following command:

[source,bash]
----
$ pod install
----

== Importing SDK

Add the Push SDK to your application module

[source,swift]
----
import AGSPush
----

== Application setup

In order to receive push messages you need to setup application to connect to Apple services in order to receive device token. Valid provisioning profile should be configured for Unified Push Server.
For more information please refer to Push Server IOS configuration guide: 
link:https://aerogear.org/docs/unifiedpush/aerogear-push-ios/guides/[Push server configuraiton guide]

== AeroGear Configuration file

A `mobile-services.json` file must exist in the application directory. It should specify configuration
for link:https://github.com/aerogear/aerogear-unifiedpush-server/[Unified Push Server]. This configuration can be generated by the link:https://github.com/aerogear/mobile-cli[AeroGear Mobile CLI]

== Registering with Unified Push Server

You can follow official Apple documentation for registration and receiving messages. SDK iterates with Your application when application receives token with APNS.

This example demonstrates how to register a device to provide the values required to register the application with APNS and Unified Push and perform the registration.

[source,swift]
----
func application(_ application: UIApplication,
                 didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    var config = UnifiedPushConfig()
    AgsPush.instance.register(
        deviceToken,
        config,
        success: {
           print("Successfully registered to Unified Push Server")
        },
        failure: { (error: Error!) in
           print("Failure to register for on Unified Push Server: \(error)")
        }
    )
}
----

You also can add some optional parameters using `UnifiedPushConfig`

[source,swift]
----
config.alias = "Example App"
config.categories = ["iOS", "Example"]
----

== Handling messages

Please follow Apple documentation for link:https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html[notification handlers]
