= AeroGear Xamarin Auth SDK

Mobile authentication SDK based on link:http://www.keycloak.org/[Keycloak] using link:http://openid.net/connect/[OpenID Connect].

Provides authentication features like access control and two factor authentication through Keycloak.

== Usage

To use the Auth SDK you'll first need to:

* Have a Keycloak instance. See <<Setting up Keycloak>>.
* Import the Core module. See link:./core.html[the Core documentation].

=== Setting up Keycloak

==== Using OpenShift

* If you do not have mobile services enabled in your OpenShift cluster follow this link:https://github.com/aerogear/mobile-core/blob/master/docs/walkthroughs/local-setup.adoc[Local Setup] guide.
* Navigate to your Openshift cluster and in the Service Catalog search for the Keycloak service.
* Click on the Keycloak service and you will be prompted to fill in details about your app.  For now you can leave these as they are.  Navigate through the setup and click Create.
This will provision the Keycloak service in the project you specified and create a public Client to be used with an app along with a bearer-only client.
See link:http://www.keycloak.org/docs/latest/server_admin/index.html#oidc-clients[Keycloak OIDC client documentation].

After provisioning, the Keycloak service will be available at the exposed Route. You can view this route inside your project or use the below command to get the route:
----
oc get route keycloak --template "http://{{.spec.host}} "
----
The route should look like `https://keycloak-myproject.192.168.37.1.nip.io/auth/`. +

==== Standalone

To setup standalone Keycloak follow Keycloak's guide link:https://github.com/keycloak/keycloak/blob/master/README.md[here].

=== Configuration file

A `mobile-services.json` file must exist in Resources folder of the apps directory. It should specify configuration
for Keycloak. This configuration can be generated by the link:https://github.com/aerogear/mobile-cli[AeroGear Mobile CLI].

For an example of Keycloak configuration see link:../../example/src/main/assets/mobile-services.json[example apps mobile-services.json].

The Auth SDK will use this configuration to communicate with Keycloak.

=== Initializing the SDK

Before using the Auth SDK it must first be initialized and configured. During
configuration an `AuthenticationConfig` must be provided to the SDK.

An example of initializing and configuring the
SDK is:

==== Android 

.MainActivity.cs
[source,C#]
----
var app = new App();
MobileCoreAndroid.Init(app.GetType().Assembly,ApplicationContext);
var authService = AuthService.InitializeService();
var authConfig = AuthenticationConfig.Builder.RedirectUri("org.aerogear.mobile.example:/callback").Build();
authService.Configure(authConfig);
----

NOTE: For Android an link:https://developer.android.com/guide/topics/manifest/intent-filter-element[intent-filter]
should be configured with the callback URL specified in `AuthenticateOptions` in
the apps `AndroidManifest.xml`. See link:https://github.com/aerogear/aerogear-xamarin-sdk/blob/master/Example/Example.Android/Properties/AndroidManifest.xml[the example app].

==== iOS 

.AppDelegate.cs
[source,C#]
----
var app = new App();
MobileCore core = MobileCoreIOS.Init(app.GetType().Assembly);
var authService = AuthService.InitializeService();
var authConfig = AuthenticationConfig.Builder.RedirectUri("org.aerogear.mobile.example:/callback").Build();
authService.Configure(authConfig);
----

=== Retrieving the current user

[source,C#]
----
// auth service is already initialised
var user = MobileCore.Instance.GetService<IAuthService>().CurrentUser();

var username = user.Username;
var email = user.Email;
var accessToken = user.AccessToken;
----


=== Authenticating

[source,C#]
----
IAuthService service = MobileCore.Instance.GetService<IAuthService>();
var authOptions = DependencyService.Get<IAuthenticateOptionsProvider>().GetOptions();
service.Authenticate(authOptions).ContinueWith(result =>
{
    // load some view
});
----


=== Retrieving a User's Roles

[source, C#]
----
// listing all Roles for a previously initialised authService

var user = MobileCore.Instance.GetService<IAuthService>().CurrentUser();
var roleItems = new List<string> { };
foreach(var role in user.getRoles())
{
    roleItems.Add(role.ToString());
}

// do something with roleItems;
----


[source, C#]
----
// checking if the current user has a specific realm role

var user = MobileCore.Instance.GetService<IAuthService>().CurrentUser();
bool isAdmin = user.HasRealmRole("user_admin");
if (isAdmin) {
    // Show some component
}

// checking if the user has a role from a specific resource named my_resource.
bool isModerator = user.HasResourceRole("my_resource", "user_moderator");
if (isModerator) {
    // Enable some button
}
----

=== Logging Out

[source, C#]
----
// auth service already initialised

var authService = MobileCore.Instance.GetService<IAuthService>();
authService.Logout(authService.CurrentUser()).ContinueWith(result =>
{
    // load some view
});
----

NOTE: To perform backchannel or federated logouts, you must enable the Backchannel Logout option for the federated identity provider. More information is available in the Keycloak documentation under  http://www.keycloak.org/docs/latest/server_admin/index.html#openid-connect-v1-0-identity-providers[OIDC Identity Providers].
